{"version":3,"sources":["BurndownChart.js","App.js","serviceWorker.js","index.js"],"names":["BurndownChart","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","avg","lastItem","NaN","currentClosedPoint","currentCapacity","handleRestTaskPointChange","bind","assertThisInitialized","e","setState","restTaskPoint","target","value","deliveryDate","Date","process","getTime","scrumCapacity","length","time","closedPoint","push","_this2","fetch","then","response","json","responseJson","getScrumCapacity","title","console","log","react_default","a","createElement","className","es6","width","height","slice","dataKey","type","domain","tickFormatter","unixTime","moment","format","labelFormatter","line","fill","Component","App","src_BurndownChart","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.60394926.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { ResponsiveContainer, ComposedChart, ScatterChart, Scatter, XAxis, YAxis, Tooltip } from 'recharts';\nimport moment from 'moment'\n\nclass BurndownChart extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      data: [],\n      avg: 0,\n      lastItem: NaN,\n      currentClosedPoint: NaN,\n      currentCapacity: NaN\n    };\n\n    this.handleRestTaskPointChange = this.handleRestTaskPointChange.bind(this);\n  }\n\n  handleRestTaskPointChange (e) {\n    this.setState({restTaskPoint: e.target.value});\n  }\n\n  getScrumCapacity() {\n    const data = this.state.data;\n    const deliveryDate = new Date(process.env.REACT_APP_DELIVERY_DATE).getTime();\n    var scrumCapacity = 0;\n    if (data.length != 0 ) {\n      var lastDate = data[data.length - 1].time;\n      var sprintAvg = this.state.avg;\n\n      scrumCapacity = (deliveryDate - lastDate)  / (1000 * 60 * 60 *24 * 14) * sprintAvg;\n\n      var currentClosedPoint = data[data.length - 1].closedPoint;\n      var lastItem = {'time': deliveryDate, 'closedPoint': scrumCapacity};\n      data.push(lastItem);\n      var currentCapacity = lastItem.closedPoint - currentClosedPoint;\n    \n      this.setState({\n        data: data,\n        lastItem: lastItem,\n        currentClosedPoint: currentClosedPoint,\n        currentCapacity: currentCapacity\n      })\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://us-central1-valiant-house-244503.cloudfunctions.net/ob-openpj-sprint-point')\n      .then((response) => response.json())\n      .then((responseJson) => {\n        var data = responseJson.data;\n        var avg  = responseJson.avg;\n\n        this.setState({\n          data: data,\n          avg: avg,\n        })\n        this.getScrumCapacity()   \n      })\n   }\n\n  render() {\n    const {\n      title,\n    } = this.props;\n\n    console.log(this.state.data)\n    return (\n      <div className=\"BurndownChart\">\n        <div>\n          現在までにCloseしたStoryPoint {this.state.currentClosedPoint} <br/>\n          最終的にCloseできるStoryPointの予測 {this.state.lastItem.closedPoint} <br/>\n          直近のSprintの平均Capacity {this.state.avg} <br/>\n          現在のCapacity {this.state.currentCapacity} <br/>\n        </div>\n        <div>\n          <ResponsiveContainer width={'100%'} height={300}>\n            <ComposedChart  data={this.state.data.slice()}>\n              <XAxis\n                dataKey=\"time\"\n                type='number'\n                domain={['auto', 'auto']}\n                tickFormatter={(unixTime) => moment(unixTime).format('YYYY/MM/DD')}\n              />\n              <YAxis \n                type='number'\n                domain={['auto', 'auto']}\n              />\n              <Tooltip labelFormatter={(unixTime) => moment(unixTime).format('YYYY/MM/DD')} />\n              <Scatter line dataKey=\"closedPoint\" fill=\"#5a5a5a\" />\n            </ComposedChart>\n          </ResponsiveContainer>\n        </div>\n        <div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default BurndownChart;\n","import React from 'react';\nimport './App.css';\n\nimport BurndownChart from \"./BurndownChart.js\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BurndownChart\n        title=\"BurndownChart\" \n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}