{"version":3,"sources":["BurndownChart.js","App.js","serviceWorker.js","index.js"],"names":["BurndownChart","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","restTaskPoint","handleRestTaskPointChange","bind","assertThisInitialized","e","setState","target","value","title","startDate","Date","process","getTime","deliveryDate","today","totalCapacity","restCapacity","capacityData","time","capacityValue","restTaskPointData","restValue","data","concat","console","log","react_default","a","createElement","className","toString","es6","width","height","dataKey","type","domain","tickFormatter","unixTime","moment","format","labelFormatter","line","fill","Component","App","src_BurndownChart","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sTA6FeA,cAxFb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,cAAe,GAGjBR,EAAKS,0BAA4BT,EAAKS,0BAA0BC,KAA/BT,OAAAU,EAAA,EAAAV,CAAAD,IAPjBA,yFAUSY,GACzBT,KAAKU,SAAS,CAACL,cAAeI,EAAEE,OAAOC,yCAGhC,IAELC,EACEb,KAAKJ,MADPiB,MAGEC,EAAY,IAAIC,KAAKC,aAAkCC,UACvDC,EAAe,IAAIH,KAAKC,YAAqCC,UAC7DE,GAAQ,IAAIJ,MAAOE,UAInBG,EAFiB,IAEiBF,EAAeJ,GAAjC,MADD,GAEfO,EAHiB,IAGgBH,EAAeC,GAAjC,MAFA,GAIbG,EAAe,CACnB,CAACC,KAAMT,EAAWU,cAAeJ,GACjC,CAACG,KAAMJ,EAAOK,cAAeH,GAC7B,CAACE,KAAML,EAAcM,cAAe,IAGhCC,EAAoB,CACxB,CAACF,KAAMJ,EAAOO,UAAW1B,KAAKI,MAAMC,eACpC,CAACkB,KAAML,EAAcQ,UAAW,IAG5BC,EAAOL,EAAaM,OAAOH,GAWjC,OAFAI,QAAQC,IAAIH,GAGVI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,WACGpB,EACAC,EAAUqB,WACVjB,EAAaiB,WACbhB,EAAMgB,WAAWJ,EAAAC,EAAAC,cAAA,WACjBb,EAAcW,EAAAC,EAAAC,cAAA,WACdZ,EAAaU,EAAAC,EAAAC,cAAA,WACbjC,KAAKI,MAAMC,eAEd0B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAqBC,MAAO,OAAQC,OAAQ,KAC1CP,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAgBT,KAAMA,GACpBI,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACEG,QAAQ,OACRC,KAAK,SACLC,OAAQ,CAAC,OAAQ,QACjBC,cAAe,SAACC,GAAD,OAAcC,IAAOD,GAAUE,OAAO,iBAEvDd,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAEEI,KAAK,SACLC,OAAQ,CAAC,OAAQ,UAEnBV,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAASU,eAAgB,SAACH,GAAD,OAAcC,IAAOD,GAAUE,OAAO,iBAC/Dd,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAASW,MAAI,EAACR,QAAQ,gBAAgBS,KAAK,YAC3CjB,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAASW,MAAI,EAACR,QAAQ,YAAYS,KAAK,eAI7CjB,EAAAC,EAAAC,cAAA,oBAlFoBgB,aCWbC,MAVf,WACE,OACEnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACkB,EAAD,CACEtC,MAAM,oBCGMuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b0f37def.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { ResponsiveContainer, ComposedChart, ScatterChart, Scatter, XAxis, YAxis, Tooltip } from 'recharts';\nimport moment from 'moment'\n\nclass BurndownChart extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      restTaskPoint: 0,\n    };\n\n    this.handleRestTaskPointChange = this.handleRestTaskPointChange.bind(this);\n  }\n\n  handleRestTaskPointChange (e) {\n    this.setState({restTaskPoint: e.target.value});\n  }\n\n  render() {\n    const {\n      title,\n    } = this.props;\n\n    var startDate = new Date(process.env.REACT_APP_START_DATE).getTime();\n    var deliveryDate = new Date(process.env.REACT_APP_DELIVERY_DATE).getTime();\n    var today = new Date().getTime();\n\n    var sprintCapacity = 25;\n    var sprintLength = 7 * 2;\n    var totalCapacity = sprintCapacity * (deliveryDate - startDate) / (1000 * 60 * 60 *24) / sprintLength;\n    var restCapacity = sprintCapacity * (deliveryDate - today) / (1000 * 60 * 60 *24) / sprintLength;\n\n    const capacityData = [\n      {time: startDate, capacityValue: totalCapacity},\n      {time: today, capacityValue: restCapacity},\n      {time: deliveryDate, capacityValue: 0}\n    ]\n\n    const restTaskPointData = [\n      {time: today, restValue: this.state.restTaskPoint},\n      {time: deliveryDate, restValue: 0}\n    ]\n\n    const data = capacityData.concat(restTaskPointData)\n  \n    const options = {\n      options: {\n        responsive: true,\n        showLine: true,\n      }\n    } \n\n    console.log(data)  \n\n    return (\n      <div className=\"BurndownChart\">\n        <div>\n          {title}\n          {startDate.toString()}\n          {deliveryDate.toString()}\n          {today.toString()}<br/>\n          {totalCapacity}<br/>\n          {restCapacity}<br/>\n          {this.state.restTaskPoint}\n        </div>\n        <div>\n          <ResponsiveContainer width={'100%'} height={300}>\n            <ComposedChart  data={data}>\n              <XAxis\n                dataKey=\"time\"\n                type='number'\n                domain={['auto', 'auto']}\n                tickFormatter={(unixTime) => moment(unixTime).format('YYYY/MM/DD')}\n              />\n              <YAxis \n                //dataKey=\"value\"\n                type='number'\n                domain={['auto', 'auto']}\n              />\n              <Tooltip labelFormatter={(unixTime) => moment(unixTime).format('YYYY/MM/DD')} />\n              <Scatter line dataKey=\"capacityValue\" fill=\"#8884d8\" />\n              <Scatter line dataKey=\"restValue\" fill=\"#555555\" />\n            </ComposedChart>\n          </ResponsiveContainer>\n        </div>\n        <div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default BurndownChart;\n","import React from 'react';\nimport './App.css';\n\nimport BurndownChart from \"./BurndownChart.js\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BurndownChart\n        title=\"BurndownChart\" \n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}